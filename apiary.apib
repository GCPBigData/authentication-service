FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Vodka API Spesification
## Authentication Service documentation

## User API [/api/user]

### Find User [GET /api/user/{username}{?requestId}]

+ Parameters
    + requestId
    + username
+ Response 200 (application/json)
        {
            "code"      : 200,
            "message"   : "Success",
            "errors"     : null,
            "data"      : {
                "username"          : "myusername",
                "active"            : true,
                "enable"            : true,
                "lastSuccessLogin"  : "2018-10-11T12:34:23"
            }
        }
+ Response 400 (application/json)
        {
            "code"      : 400,
            "message"   : "Bad Request",
            "errors"     : {
                "username" : [
                    "Username may not be empty"
                ]
            }
        }
+ Response 404 (application/json)
        {
            "code"      : 404,
            "message"   : "User Not Found"
        }

### Create User [POST /api/user/registration]

+ Parameters
    + requestId
+ Request (application/json)

        {
            "username": "my-username",
            "password": "my-password"
        }

+ Response 200 (application/json)
        {
            "code"      : 200,
            "message"   : "Success",
            "errors"    : null,
            "data"      : true
        }
+ Response 400 (application/json)
        {
            "code"      : 400,
            "message"   : "Bad Request",
            "errors"    : {
                "username"  : ["Username may not be empty"],
                "password"  : ["password not valid"]
            }
        }

### Delete User [DELETE /api/user/{username}{?requestId}]
+ Parameters
    + requestId
    + username
+ Response 200 (application/json)
        {
            "code"      : 200,
            "message"   : "Success",
            "errors"    : null,
            "data"      : true
        }
+ Response 400 (application/json)
        {
            "code"      : 400,
            "message"   : "Bad Request",
            "errors"    : {
                "username"  : ["Username may not be empty"]
            }
        }

### Change Password [REVIEW] [POST /api/user/change-password]
+ Parameters
    + requestId
+ Request (application/json)
        {
            "username"   : "username",
            "oldPassword": "my-old-password",
            "newPassword": "my-new-password"
        }
+ Response 200 (application/json)
        {
            "code"      : 200,
            "message"   : "Success",
            "errors"    : null,
            "data"      : true
        }
+ Response 400 (application/json)
        {
            "code"      : 400,
            "message"   : "Bad Request",
            "errors"    : {
                "username"  : ["Username may not be empty"],
                "password"  : ["Password may not be empty"]
            }
        }

### Authenticate user [REVIEW] [POST /api/authentication/_normal]
+ Parameters
    + requestId
+ Request (application/json)
        {
            "username": "my-username",
            "password": "my-password"
        }
+ Response 200 (application/json)
        {
            "code"      : 200,
            "message"   : "Success",
            "errors"    : null,
            "data"      : true
        }
+ Response 400 (application/json)
        {
            "code"      : 400,
            "message"   : "Bad Request",
            "errors"    : {
                "username"  : ["Username may not be empty"],
                "password"  : ["Password may not be empty"]
            }
        }
+ Response 401 (application/json)
        {
            "code"      : 401,
            "message"   : "Unauthorized"
        }